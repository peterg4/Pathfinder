{"version":3,"sources":["index.js"],"names":["Square","props","y","x","id","location","className","onClick","onMouseUp","onMouseDown","onMouseOver","Board","square_board","shift","j","row","i","push","state","squares","xStart","yStart","isWalls","isRunning","this","console","log","document","getElementById","setState","o","length","slice","resetWalls","queue","paths","Map","set","search","setInterval","timer","next","get","GLOBAL_YGOAL","split","find_path","clearInterval","isSet","GLOBAL_XMAX","GLOBAL_YMAX","resetState","dist","dist_origin","dist_end","Math","abs","open_list","sort","a","b","isMouseDown","undefined","value","moveStart","clas","class","addWall","toggleMouseDown","toggleMouseUp","items","renderSquare","board_","entries","index","href","src","toggleWall","toggleWeight","BFS","A_star","status","React","Component","Game","domContainer","querySelector","ReactDOM","render"],"mappings":"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","file":"static/js/main.1aae3687.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport update from 'immutability-helper'\r\nimport { ControlLabel } from 'react-bootstrap';\r\nconst GLOBAL_XMAX = 50;\r\nconst GLOBAL_YMAX = 30;\r\nconst GLOBAL_YGOAL = 15;\r\nconst GLOBAL_XGOAL = 35;\r\nfunction Square(props) {\r\n    if(props.y==GLOBAL_YGOAL && props.x == GLOBAL_XGOAL) {\r\n        return (\r\n            <button id={props.location} className={'green square'} onClick={props.onClick} onMouseUp={props.onMouseUp} onMouseDown={props.onMouseDown} onMouseOver={props.onMouseOver}></button>\r\n        );\r\n    } \r\n    if(props.y==5 && props.x ==5){\r\n        return (\r\n            <button id={props.location} className={'start square'} onClick={props.onClick} onMouseUp={props.onMouseUp} onMouseDown={props.onMouseDown} onMouseOver={props.onMouseOver}></button>\r\n        );\r\n    }\r\n    return (\r\n        <button id={props.location} className={'square'} onClick={props.onClick} onMouseUp={props.onMouseUp} onMouseDown={props.onMouseDown} onMouseOver={props.onMouseOver}></button>\r\n    );\r\n  }\r\n\r\nclass Board extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        var square_board = [[]];\r\n        square_board.shift();\r\n        for(var j = 0; j < GLOBAL_YMAX; j++){  \r\n            var row = [];\r\n            for(var i = 0; i < GLOBAL_XMAX; i++){\r\n                if(i === GLOBAL_XGOAL && j === GLOBAL_YGOAL)\r\n                    row.push('green')\r\n                else \r\n                    row.push(null);\r\n            }\r\n            square_board.push(row);\r\n        }\r\n        var xStart = 5;\r\n        var yStart = 5;\r\n        var isWalls = true;\r\n        var isRunning = false;\r\n        square_board[xStart][yStart] = 'start';\r\n        this.state = {\r\n            squares: square_board,\r\n            xStart: xStart,\r\n            yStart: yStart,\r\n            isWalls: isWalls,\r\n            isRunning: isRunning,\r\n        };\r\n    }\r\n    resetState(){\r\n        if(this.isRunning)\r\n            return;\r\n        console.log('clearing...');\r\n        var squares = [[]];\r\n        squares.shift();\r\n        for(var j = 0; j < GLOBAL_YMAX; j++){  \r\n            var row = [];\r\n            for(var i = 0; i < GLOBAL_XMAX; i++){\r\n                document.getElementById(j+','+i).className = 'square';\r\n                if(i ===  GLOBAL_XGOAL && j ===  GLOBAL_YGOAL) {\r\n                    row.push('green');\r\n                    document.getElementById(j+','+i).className = 'green square';\r\n                }\r\n                if( i===5 && j ===5) {\r\n                    document.getElementById(j+','+i).className = 'start square';\r\n                    row.push('start');\r\n                }\r\n                else { \r\n                    row.push(null);\r\n                }\r\n            }\r\n            \r\n            squares.push(row);\r\n        }\r\n        this.setState({squares: squares, xStart: 5, yStart: 5});\r\n    }\r\n    resetWalls(){\r\n        if(this.isRunning)\r\n            return;\r\n        console.log('clearing...');\r\n        var squares = [];\r\n        for (var o = 0; o < this.state.squares.length; o++)\r\n         squares = this.state.squares.slice();\r\n        for(var j = 0; j < GLOBAL_YMAX; j++){  \r\n            var row = [];\r\n            for(var i = 0; i < GLOBAL_XMAX; i++){\r\n                if(squares[j][i] !== 'wall'){\r\n                    squares[j][i] = null;\r\n                    document.getElementById(j+','+i).className = 'square';\r\n                    if(i ===  GLOBAL_XGOAL && j ===  GLOBAL_YGOAL) {\r\n                        row.push('green');\r\n                        document.getElementById(j+','+i).className = 'green square';\r\n                    }\r\n                  //  if( i===5 && j ===5) {\r\n                  //      document.getElementById(j+','+i).className = 'start square';\r\n                  //      row.push('start');\r\n                  //  }\r\n                    else { \r\n                        row.push(null);\r\n                    }\r\n                } else {\r\n                    row.push(null);\r\n                }\r\n            }\r\n            \r\n            squares.push(row);\r\n        }\r\n        this.setState({squares: squares},);\r\n    }\r\n\r\n    BFS(i,j) {\r\n        if(this.isRunning)\r\n            return;\r\n        this.resetWalls();\r\n        this.isRunning = true;\r\n        var queue = [[]];\r\n        queue.push([i,j]);\r\n        queue.shift();\r\n        var paths = new Map();\r\n        let y = queue[0][0];\r\n        let x = queue[0][1]\r\n        paths.set(y+','+x,[0,null]);\r\n        console.log(queue[0]);\r\n        var timer = 1;\r\n        var search = setInterval(() => {\r\n            var squares = [];\r\n            timer++;\r\n            for (var o = 0; o < this.state.squares.length; o++)\r\n                squares = this.state.squares.slice();\r\n            //copy only y+1, y-1, x+1, x-1\r\n            //how do i set state???? - coyp the \r\n            try{\r\n                y = queue[0][0];\r\n                x = queue[0][1];\r\n                if(queue.length !== 0 && !(y ===  GLOBAL_YGOAL && x ===  GLOBAL_XGOAL)) {\r\n                    if(squares[y][x] !== 'X') { \r\n                        let dist = 1;\r\n                        var isSet=0;\r\n                        if(squares[y][x] == 'X'){\r\n                            queue.shift();\r\n                            return;\r\n                        }\r\n                        if(squares[y][x] == 'weight') {\r\n                            squares[y][x] = 'wasweight';\r\n                            queue.push([y,x]);\r\n                            this.setState({squares: squares}); \r\n                            return;\r\n                        }\r\n                    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n                        if(x < GLOBAL_XMAX-1 && squares[y][x+1] !== 'X' && squares[y][x+1] !== 'wall' && squares[y][x+1] !== 'weight real_weight') {\r\n                            queue.push([y,x+1]);\r\n                            paths.set(y+','+(x+1),[dist, y+','+x]);\r\n                        }\r\n                        if(x > 0 && squares[y][x-1] !== 'X' && squares[y][x-1] !== 'wall' && squares[y][x-1] !== 'weight real_weight'){\r\n                            queue.push([y,x-1]);\r\n                            paths.set(y+','+(x-1),[dist, y+','+x]);\r\n                        }\r\n\r\n                        if(y < GLOBAL_YMAX-1 && squares[y+1][x] !== 'X' && squares[y+1][x] !== 'wall' && squares[y+1][x] !== 'weight real_weight'){\r\n                            queue.push([y+1,x]);\r\n                            paths.set((y+1)+','+x,[dist, y+','+x]);\r\n                        }\r\n\r\n                        if(y > 0 && squares[y-1][x] !== 'X' && squares[y-1][x] !== 'wall' && squares[y-1][x] !== 'weight real_weight'){\r\n                            queue.push([y-1,x]);\r\n                            paths.set((y-1)+','+x,[dist, y+','+x]);\r\n                        }\r\n                    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n                        if( x < 36 && squares[y][x+1] == 'weight real_weight') {\r\n                            squares[y][x+1] = 'weight';\r\n                            queue.push([y,x]);\r\n                            squares[y][x] = null;\r\n                            isSet =1;\r\n                        //    paths.set(y+','+(x+1),[dist, y+','+x]); \r\n                        }\r\n                        if(x > 0 && squares[y][x-1] == 'weight real_weight'){\r\n                            squares[y][x-1] = 'weight';\r\n                            queue.push([y,x]);\r\n                            squares[y][x] = null;\r\n                            isSet =1;\r\n                      //      paths.set(y+','+(x-1),[dist, y+','+x]);\r\n                        }\r\n                        if(y < 19 && squares[y+1][x] == 'weight real_weight'){\r\n                            squares[y+1][x] = 'weight';\r\n                            queue.push([y,x]);\r\n                            squares[y][x] = null;\r\n                            isSet =1;\r\n                        //    paths.set((y+1)+','+x,[dist, y+','+x]);\r\n                        }\r\n                        if(y > 0 && squares[y-1][x] == 'weight real_weight'){\r\n                            squares[y-1][x] = 'weight';\r\n                            queue.push([y,x]);\r\n                            squares[y][x] = null;\r\n                            isSet =1;\r\n                        //    paths.set((y-1)+','+x,[dist, y+','+x]);\r\n                        }\r\n                        if(!isSet)\r\n                            squares[y][x] = 'X';\r\n                        squares[i][j] = 'start';\r\n                        document.getElementById(y+\",\"+x).className = squares[y][x] + \" square\";\r\n                    }\r\n                    queue.shift();\r\n                } else {\r\n                    let next = paths.get( GLOBAL_YGOAL+','+ GLOBAL_XGOAL)[1].split(',');\r\n                    y = next[0];\r\n                    x = next[1];\r\n                    squares[y][x] = 'visited';\r\n                    var find_path = setInterval(() => { \r\n                        if(next !== null && !(x == j && y == i)) {\r\n                        squares[y][x] = 'visited';\r\n                        document.getElementById(y+\",\"+x).className = squares[y][x]+' square';\r\n                        next = paths.get(y+','+x)[1];\r\n                        if(next!=null){\r\n                            next = next.split(',');\r\n                            y = next[0];\r\n                            x = next[1];\r\n                        }\r\n                        \r\n                        } else {\r\n                        clearInterval(find_path);\r\n                        }\r\n                    clearInterval(search);\r\n                    }, 1);\r\n                    this.isRunning = false;\r\n                }\r\n            } catch {\r\n                clearInterval(find_path);\r\n                clearInterval(search);\r\n                this.isRunning = false;\r\n                this.resetState();\r\n            }\r\n        },1);\r\n    }\r\n    A_star(i,j){\r\n        if(this.isRunning)\r\n            return;\r\n        this.resetWalls();\r\n        this.isRunning = true;\r\n        var dist_origin = 0;\r\n        var dist_end = Math.abs(GLOBAL_YGOAL-j) + Math.abs(GLOBAL_XGOAL-i);\r\n        var dist;\r\n        var open_list = [[]];\r\n        open_list.shift();\r\n        open_list.push([i,j,0,0]);\r\n        var paths = new Map();\r\n        paths.set(i+','+j,[0,null]);\r\n        let x = i;\r\n        let y = j;\r\n        var timer = 1;\r\n        //for all the nodes next to the current node\r\n            //if cur node is end node animate path back\r\n            //calculate dist_origin + dist_end, add vals to open_list also insert paths into map like for \r\n            //sort open_list and choose lowest val for next node\r\n            var search = setInterval(() => {\r\n                timer++;\r\n                var squares = [];\r\n                for (var o = 0; o < this.state.squares.length; o++)\r\n                    squares = this.state.squares.slice();\r\n                    \r\n                try{\r\n                    y = open_list[0][0];\r\n                    x = open_list[0][1];\r\n                    if(squares[y][x] == 'X'){\r\n                        open_list.shift();\r\n                        return;\r\n                    }\r\n                    dist_origin = open_list[0][3];\r\n                    dist_origin++;\r\n                    console.log(dist_origin);\r\n                    if(open_list.length > 0 && !(y === GLOBAL_YGOAL && x === GLOBAL_XGOAL)) {\r\n                        open_list.shift();\r\n                        if(squares[y][x] !== 'X') { \r\n                            if(x < GLOBAL_XMAX-1 && squares[y][x+1] !== 'X' && squares[y][x+1] !== 'wall') {\r\n                            //    dist_origin = Math.abs(y-j) + Math.abs(x+1-i)+1;\r\n                                dist_end = Math.abs( GLOBAL_YGOAL-y) + Math.abs(GLOBAL_XGOAL-(x+1));\r\n                                dist = dist_origin + dist_end;\r\n                                open_list.push([y,x+1,dist,dist_origin]);\r\n                                paths.set(y+','+(x+1),[dist, y+','+x]);\r\n                            }\r\n                            \r\n                            if(x > 0 && squares[y][x-1] !== 'X' && squares[y][x-1] !== 'wall'){\r\n                          //      dist_origin = Math.abs(y-j) + Math.abs(x-1-i)+1;\r\n                                dist_end = Math.abs( GLOBAL_YGOAL-y) + Math.abs( GLOBAL_XGOAL-(x-1));\r\n                                dist = dist_origin + dist_end;\r\n                                open_list.push([y,x-1,dist,dist_origin]);\r\n                                paths.set(y+','+(x-1),[dist, y+','+x]);\r\n                            }\r\n    \r\n                            if(y < GLOBAL_YMAX-1 && squares[y+1][x] !== 'X' && squares[y+1][x] !== 'wall'){\r\n                          //      dist_origin = Math.abs(y+1-j) + Math.abs(x-i)+1;\r\n                                dist_end = Math.abs( GLOBAL_YGOAL-(y+1)) + Math.abs( GLOBAL_XGOAL-x);\r\n                                dist = dist_origin + dist_end;\r\n                                open_list.push([y+1,x,dist,dist_origin]);\r\n                                paths.set((y+1)+','+x,[dist, y+','+x]);\r\n                            }\r\n    \r\n                            if(y > 0 && squares[y-1][x] !== 'X' && squares[y-1][x] !== 'wall'){\r\n                            //    dist_origin = Math.abs(y-1-j) + Math.abs(x-i)+1;\r\n                                dist_end = Math.abs( GLOBAL_YGOAL-(y-1)) + Math.abs( GLOBAL_XGOAL-x);\r\n                                dist = dist_origin + dist_end;\r\n                                open_list.push([y-1,x,dist,dist_origin]);\r\n                                paths.set((y-1)+','+x,[dist, y+','+x]);\r\n                            }\r\n                            \r\n                            open_list.sort(function(a,b){\r\n                                return a[2]-b[2];\r\n                            });\r\n                            squares[y][x] = 'X';\r\n                            squares[i][j] = 'start';\r\n                            document.getElementById(y+\",\"+x).className = squares[y][x] + \" square\";\r\n                        }\r\n                    } else {\r\n                        let next = paths.get(GLOBAL_YGOAL+','+GLOBAL_XGOAL)[1].split(',');\r\n                        y = next[0];\r\n                        x = next[1];\r\n                        squares[y][x] = 'visited';\r\n                        var find_path = setInterval(() => { \r\n                            if(next !== null && !(x == j && y == i)) {\r\n                            squares[y][x] = 'visited';\r\n                            document.getElementById(y+\",\"+x).className = squares[y][x] + \" square\";\r\n                            next = paths.get(y+','+x)[1];\r\n                            if(next!=null){\r\n                                next = next.split(',');\r\n                                y = next[0];\r\n                                x = next[1];\r\n                            }\r\n                            } else {\r\n                            clearInterval(find_path);\r\n                            }\r\n                        clearInterval(search);\r\n                        }, 10);\r\n                        this.isRunning = false;\r\n                    }\r\n                } catch {\r\n                    clearInterval(find_path);\r\n                    clearInterval(search);\r\n                    this.isRunning = false;\r\n                    this.resetState();\r\n                }\r\n            }, 5);\r\n    }\r\n    toggleWall(){\r\n        this.isWalls = true;\r\n    }\r\n    toggleWeight(){\r\n        this.isWalls = false;\r\n    }\r\n    addWall(i,j){\r\n        console.log(this.isWalls);\r\n        if(this.isMouseDown){\r\n            var squares = [];\r\n            for (var o = 0; o < this.state.squares.length; o++)\r\n                squares = this.state.squares.slice();\r\n            if(squares[i][j] == 'green' || squares[i][j] == 'start'){\r\n            } else if (!this.isWalls && this.isWalls!=undefined){\r\n                squares[i][j] = 'weight real_weight';\r\n            } else {\r\n                squares[i][j] = 'wall';\r\n                document.getElementById(i+\",\"+j).className = 'wall square';\r\n            }\r\n           // this.setState({squares: squares});\r\n        }\r\n    }\r\n    toggleMouseDown(){\r\n        this.isMouseDown = true;\r\n    }\r\n    toggleMouseUp(){\r\n        this.isMouseDown = false;\r\n    }\r\n    moveStart(i,j){\r\n        var squares = [];\r\n        for (var o = 0; o < this.state.squares.length; o++)\r\n            squares = this.state.squares.slice();\r\n        var xStart = this.state.xStart;\r\n        var yStart = this.state.yStart;\r\n        squares[xStart][yStart] = null;\r\n        document.getElementById(xStart+\",\"+yStart).className = \"square\";\r\n        squares[i][j] = 'start';\r\n        document.getElementById(i+\",\"+j).className = squares[i][j] + \" square\";\r\n        xStart = i;\r\n        yStart = j;\r\n        this.setState({squares: squares, xStart: xStart, yStart: yStart})\r\n    }   \r\n    renderSquare(i,j) {\r\n        return (\r\n        <Square\r\n            value={this.state.squares[i][j]}\r\n            onClick={() => this.moveStart(i,j)}\r\n            clas={this.state.class}\r\n            onMouseOver={() => this.addWall(i,j)}\r\n            onMouseDown={() => this.toggleMouseDown()}\r\n            onMouseUp={() => this.toggleMouseUp()}\r\n            isMouseDown ={this.isMouseDown}\r\n            isWalls={this.isWalls}\r\n            location ={[i]+','+[j]}\r\n            y = {i}\r\n            x ={j}\r\n        />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let status;\r\n        \r\n        const items = [[]];\r\n        for(var x = 0; x < GLOBAL_YMAX; x++) {\r\n            var row = [];\r\n            for(var j = 0; j < GLOBAL_XMAX; j++){\r\n                row.push(this.renderSquare(x,j));\r\n                if(j===GLOBAL_XMAX-1)\r\n                    items.push(row);\r\n            }\r\n            \r\n        }\r\n        const board_ = [];\r\n        for (const [index] of items.entries()) {\r\n            board_.push(<div className=\"board-row\">{items[index]}</div>);\r\n        }\r\n        \r\n        return (\r\n        \r\n        <div>\r\n\r\n        <nav className=\"navbar navbar-dark dark\">\r\n            <a class=\"navbar-brand\" href=\"#\"><img src=\"path.png\"></img> <div className=\"logo\">Pathfinder</div></a>\r\n            <button className=\"navbar-toggler reset first\"onClick={() => this.toggleWall()}> Add Walls</button>\r\n            <button className=\"navbar-toggler reset\"onClick={() => this.toggleWeight()}> Add Weights</button>\r\n            <button className=\"navbar-toggler reset\"onClick={() => this.BFS(this.state.xStart,this.state.yStart)}> Dijsktra's</button>\r\n            <button className=\"navbar-toggler reset\"onClick={() => this.A_star(this.state.xStart,this.state.yStart)}> A*</button>\r\n            <button className=\"navbar-toggler reset last\"onClick={() => this.resetState()}> Reset Board</button>\r\n        </nav>\r\n             \r\n        <div className=\"status\">{status}</div>\r\n            {board_}\r\n        </div>\r\n        \r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\nrender() {\r\n    return (\r\n    <div className=\"game\">\r\n        <div className=\"game-board\">\r\n        <Board />\r\n        </div>\r\n        <div className=\"game-info\">\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n}\r\n\r\n// ========================================\r\nconst domContainer = document.querySelector('#root');\r\nReactDOM.render(<Game />,domContainer);\r\n"],"sourceRoot":""}