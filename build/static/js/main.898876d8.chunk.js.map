{"version":3,"sources":["index.js"],"names":["GLOBAL_XMAX","parseInt","window","innerWidth","GLOBAL_YMAX","innerHeight","GLOBAL_XGOAL","GLOBAL_YGOAL","randomIntFromInterval","min","max","Math","floor","random","Square","props","y","x","id","location","className","onClick","onMouseUp","onMouseDown","onMouseOver","console","log","Board","square_board","shift","j","row","i","push","state","squares","xStart","yStart","isWalls","isRunning","this","document","getElementById","setState","o","length","slice","midx","midy","xmax","ymax","xmin","ymin","resetState","initialize","setInterval","clearInterval","generateMaze","newmidx","newmidy","holex","holex2","holey","divide","resetWalls","queue","paths","Map","set","timer","search","ii","find_path","next","get","split","dist","dist_origin","dist_end","abs","open_list","sort","a","b","isMouseDown","undefined","value","moveStart","clas","class","addWall","toggleMouseDown","toggleMouseUp","items","renderSquare","board_","entries","index","href","src","toggleWall","toggleWeight","BFS","A_star","StartMaze","status","React","Component","Game","domContainer","querySelector","ReactDOM","render"],"mappings":"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","file":"static/js/main.898876d8.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nconst GLOBAL_XMAX = parseInt((window.innerWidth-100)/25);\r\nconst GLOBAL_YMAX = parseInt((window.innerHeight-100)/25);\r\nconst GLOBAL_XGOAL = parseInt(GLOBAL_XMAX*.70);\r\nconst GLOBAL_YGOAL = parseInt(GLOBAL_YMAX*(3/4));\r\nfunction randomIntFromInterval(min, max) { // min and max included \r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\nconsole.log(GLOBAL_XMAX, GLOBAL_YMAX)\r\nfunction Square(props) {\r\n    if(props.y==GLOBAL_YGOAL && props.x == GLOBAL_XGOAL) {\r\n        return (\r\n            <button id={props.location} className={'green square'} onClick={props.onClick} onMouseUp={props.onMouseUp} onMouseDown={props.onMouseDown} onMouseOver={props.onMouseOver}></button>\r\n        );\r\n    } \r\n    if(props.y==5 && props.x ==5){\r\n        return (\r\n            <button id={props.location} className={'start square'} onClick={props.onClick} onMouseUp={props.onMouseUp} onMouseDown={props.onMouseDown} onMouseOver={props.onMouseOver}></button>\r\n        );\r\n    }\r\n    return (\r\n        <button id={props.location} className={'square'} onClick={props.onClick} onMouseUp={props.onMouseUp} onMouseDown={props.onMouseDown} onMouseOver={props.onMouseOver}></button>\r\n    );\r\n  }\r\n\r\nclass Board extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        var square_board = [[]];\r\n        square_board.shift();\r\n        for(var j = 0; j < GLOBAL_YMAX; j++){  \r\n            var row = [];\r\n            for(var i = 0; i < GLOBAL_XMAX; i++){\r\n                if(i === GLOBAL_XGOAL && j === GLOBAL_YGOAL)\r\n                    row.push('green')\r\n                else \r\n                    row.push(null);\r\n            }\r\n            square_board.push(row);\r\n        }\r\n        var xStart = 5;\r\n        var yStart = 5;\r\n        var isWalls = true;\r\n        var isRunning = false;\r\n        square_board[xStart][yStart] = 'start';\r\n        this.state = {\r\n            squares: square_board,\r\n            xStart: xStart,\r\n            yStart: yStart,\r\n            isWalls: isWalls,\r\n            isRunning: isRunning,\r\n        };\r\n    }\r\n    resetState(){\r\n        if(this.isRunning)\r\n            return;\r\n        console.log('clearing...');\r\n        var squares = [[]];\r\n        squares.shift();\r\n        for(var j = 0; j < GLOBAL_YMAX; j++){  \r\n            var row = [];\r\n            for(var i = 0; i < GLOBAL_XMAX; i++){\r\n                document.getElementById(j+','+i).className = 'square';\r\n                if(i ===  GLOBAL_XGOAL && j ===  GLOBAL_YGOAL) {\r\n                    row.push('green');\r\n                    document.getElementById(j+','+i).className = 'green square';\r\n                }\r\n                if( i===5 && j ===5) {\r\n                    document.getElementById(j+','+i).className = 'start square';\r\n                    row.push('start');\r\n                }\r\n                else { \r\n                    row.push(null);\r\n                }\r\n            }\r\n            \r\n            squares.push(row);\r\n        }\r\n        this.setState({squares: squares, xStart: 5, yStart: 5});\r\n    }\r\n    resetWalls(){\r\n        if(this.isRunning)\r\n            return;\r\n        console.log('clearing...');\r\n        var squares = [];\r\n        for (var o = 0; o < this.state.squares.length; o++)\r\n         squares = this.state.squares.slice();\r\n        for(var j = 0; j < GLOBAL_YMAX; j++){  \r\n            var row = [];\r\n            for(var i = 0; i < GLOBAL_XMAX; i++){\r\n                if(squares[j][i] !== 'wall' && squares[j][i] !== 'weight real_weight'){\r\n                    squares[j][i] = null;\r\n                    document.getElementById(j+','+i).className = 'square';\r\n                    if(i ===  GLOBAL_XGOAL && j ===  GLOBAL_YGOAL) {\r\n                        row.push('green');\r\n                        document.getElementById(j+','+i).className = 'green square';\r\n                    }\r\n                    else { \r\n                        row.push(null);\r\n                    }\r\n                } else {\r\n                    row.push(null);\r\n                }\r\n            }\r\n            \r\n            squares.push(row);\r\n        }\r\n        this.setState({squares: squares},);\r\n    }\r\n    async StartMaze(midx, midy, xmax, ymax, xmin, ymin) {\r\n        await this.resetState();\r\n        var squares =[];\r\n        for (var o = 0; o < this.state.squares.length; o++)\r\n            squares = this.state.squares.slice();\r\n        var i = 0;\r\n        var j = 0;\r\n        var initialize = setInterval(() => {\r\n            if(i < xmax) {\r\n                squares[0][i] = 'wall';\r\n                squares[ymax-1][i] = 'wall';\r\n                document.getElementById(0+','+i).className = 'wall square';\r\n                document.getElementById((ymax-1)+','+i).className = 'wall square';\r\n                i++;\r\n            } else if(j < ymax) {\r\n                squares[j][0] = 'wall';\r\n                squares[j][xmax-1] = 'wall';\r\n                document.getElementById(j+','+0).className = 'wall square';\r\n                document.getElementById(j+','+(xmax-1)).className = 'wall square';\r\n                j++;\r\n            }else {\r\n                clearInterval(initialize);\r\n                midx = randomIntFromInterval(2, xmax-2);\r\n                midy = randomIntFromInterval(2, ymax-2);\r\n                this.generateMaze(midx, midy, xmax, ymax, xmin, ymin);\r\n            }\r\n        })\r\n    }\r\n    async generateMaze(midx, midy, xmax, ymax, xmin, ymin) {\r\n        if((xmax-xmin) < 4 || ymax-ymin < 4) {\r\n            return;\r\n        }\r\n        var newmidx = randomIntFromInterval(xmin+2, midx-2);\r\n        var newmidy = randomIntFromInterval(ymin+2, midy-2);\r\n        await this.generateMaze(newmidx, newmidy, midx, midy, xmin, ymin);\r\n        newmidx = randomIntFromInterval(midx+2, xmax-2);\r\n        newmidy = randomIntFromInterval(ymin+2, midy-2);\r\n        this.generateMaze(newmidx, newmidy, xmax, midy, midx, ymin);\r\n        console.log((xmax-xmin)*(ymax-ymin));\r\n        var squares =[];\r\n        for (var o = 0; o < this.state.squares.length; o++)\r\n            squares = this.state.squares.slice();\r\n        if(xmin == 0){\r\n            xmin--\r\n        }\r\n        if(xmax == GLOBAL_XMAX){\r\n            xmax++;\r\n        }\r\n        if(ymin == 0){\r\n            ymin--\r\n        }\r\n        if(ymax == GLOBAL_XMAX){\r\n            ymax++;\r\n        }\r\n        var i = xmin+2;\r\n        var j = ymin+2;\r\n        var hole_countx = 0;\r\n        var hole_county = 0;\r\n        var holex =  randomIntFromInterval(0, midx-1);\r\n        var holex2 = randomIntFromInterval(midx+1, xmax);\r\n        var holey = randomIntFromInterval(0, midy-1);\r\n        var divide =  setInterval(() => {\r\n\r\n            if(i < xmax-2) {\r\n                if(!(midy == this.state.xStart && i==this.state.yStart) && !(midy == GLOBAL_YGOAL && i == GLOBAL_XGOAL) && i!=holex && i!=holex2) {\r\n                    squares[midy][i] = 'wall';\r\n                    document.getElementById(midy+','+i).className = 'wall square';\r\n                } \r\n                i++;\r\n            } else if(j < ymax-2) {\r\n                if(!(midx == this.state.yStart && j==this.state.xStart) && !(midx == GLOBAL_XGOAL && j == GLOBAL_YGOAL) && j!=holey) {\r\n                    squares[j][midx] = 'wall';\r\n                    document.getElementById(j+','+midx).className = 'wall square';\r\n                }\r\n                j++;\r\n            } else {\r\n                newmidx = randomIntFromInterval(midx+2, xmax-2);\r\n                newmidy = randomIntFromInterval(midy+2, ymax-2);\r\n                this.generateMaze(newmidx, newmidy, xmax, ymax, midx, midy);\r\n                newmidx = randomIntFromInterval(xmin+2, midx-2);\r\n                newmidy = randomIntFromInterval(midy+2, ymax-2);\r\n                this.generateMaze(newmidx, newmidy, midx, ymax, xmin, midy);\r\n                clearInterval(divide);\r\n                return;\r\n            }\r\n        }, 10)\r\n    }\r\n    BFS(i,j) {\r\n        if(this.isRunning)\r\n            return;\r\n        this.resetWalls();\r\n        this.isRunning = true;\r\n        var queue = [[]];\r\n        queue.push([i,j]);\r\n        queue.shift();\r\n        var paths = new Map();\r\n        let y = queue[0][0];\r\n        let x = queue[0][1]\r\n        paths.set(y+','+x,[0,null]);\r\n        var timer = 4;\r\n        var search = setInterval(() => {\r\n            for(var ii = 0; ii < timer; ii++) {\r\n                var squares = [];\r\n                for (var o = 0; o < this.state.squares.length; o++)\r\n                    squares = this.state.squares.slice();\r\n                try{\r\n                    y = queue[0][0];\r\n                    x = queue[0][1];\r\n                    if(queue.length !== 0 && !(y ===  GLOBAL_YGOAL && x ===  GLOBAL_XGOAL)) {\r\n                        if(squares[y][x] !== 'X') { \r\n                            let dist = 1;\r\n                            var isSet=0;\r\n                            if(squares[y][x] == 'X'){\r\n                                queue.shift();\r\n                                return;\r\n                            }\r\n                        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n                            if(x < GLOBAL_XMAX-1 && squares[y][x+1] !== 'X' && squares[y][x+1] !== 'wall' && squares[y][x+1] !== 'weight real_weight') {\r\n                                queue.push([y,x+1]);\r\n                                paths.set(y+','+(x+1),[dist, y+','+x]);\r\n                            }\r\n                            if(x > 0 && squares[y][x-1] !== 'X' && squares[y][x-1] !== 'wall' && squares[y][x-1] !== 'weight real_weight'){\r\n                                queue.push([y,x-1]);\r\n                                paths.set(y+','+(x-1),[dist, y+','+x]);\r\n                            }\r\n\r\n                            if(y < GLOBAL_YMAX-1 && squares[y+1][x] !== 'X' && squares[y+1][x] !== 'wall' && squares[y+1][x] !== 'weight real_weight'){\r\n                                queue.push([y+1,x]);\r\n                                paths.set((y+1)+','+x,[dist, y+','+x]);\r\n                            }\r\n\r\n                            if(y > 0 && squares[y-1][x] !== 'X' && squares[y-1][x] !== 'wall' && squares[y-1][x] !== 'weight real_weight'){\r\n                                queue.push([y-1,x]);\r\n                                paths.set((y-1)+','+x,[dist, y+','+x]);\r\n                            }\r\n                        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n                            if( x < GLOBAL_XMAX-1 && squares[y][x+1] === 'weight real_weight') {\r\n                                squares[y][x+1] = 'weight';\r\n                                document.getElementById(y+\",\"+x).className = squares[y][x+1] + \" square\";\r\n                                queue.push([y,x]);\r\n                            }\r\n                            if(x > 0 && squares[y][x-1] === 'weight real_weight'){\r\n                                squares[y][x-1] = 'weight';\r\n                                queue.push([y,x]);\r\n                            }\r\n                            if(y < GLOBAL_YMAX-1 && squares[y+1][x] === 'weight real_weight'){\r\n                                squares[y+1][x] = 'weight';\r\n                                queue.push([y,x]);\r\n                                document.getElementById(y+\",\"+x).className = squares[y+1][x] + \" square\";\r\n                            }\r\n                            if(y > 0 && squares[y-1][x] === 'weight real_weight'){\r\n                                squares[y-1][x] = 'weight';\r\n                                queue.push([y,x]);\r\n                                document.getElementById(y+\",\"+x).className = squares[y-1][x] + \" square\";\r\n                            }\r\n                            squares[y][x] = 'X';\r\n                            squares[i][j] = 'start';\r\n                            document.getElementById(y+\",\"+x).className = squares[y][x] + \" square\";\r\n                        }\r\n                        timer = queue.length;\r\n                        queue.shift();\r\n                    } else {\r\n                        timer = 1;\r\n                        let next = paths.get( GLOBAL_YGOAL+','+ GLOBAL_XGOAL)[1].split(',');\r\n                        y = next[0];\r\n                        x = next[1];\r\n                        squares[y][x] = 'visited';\r\n                        var find_path = setInterval(() => { \r\n                            if(next !== null && !(x == j && y == i)) {\r\n                            squares[y][x] = 'visited';\r\n                            document.getElementById(y+\",\"+x).className = squares[y][x]+' square';\r\n                            next = paths.get(y+','+x)[1];\r\n                            if(next!=null){\r\n                                next = next.split(',');\r\n                                y = next[0];\r\n                                x = next[1];\r\n                            }\r\n                            \r\n                            } else {\r\n                            clearInterval(find_path);\r\n                            }\r\n                        clearInterval(search);\r\n                        }, 15);\r\n                        this.isRunning = false;\r\n                    }\r\n                } catch {\r\n                    clearInterval(find_path);\r\n                    clearInterval(search);\r\n                    this.isRunning = false;\r\n                }\r\n            }\r\n        }, 50);\r\n    }\r\n    A_star(i,j){\r\n        if(this.isRunning)\r\n            return;\r\n        this.resetWalls();\r\n        this.isRunning = true;\r\n        var dist_origin = 0;\r\n        var dist_end = Math.abs(GLOBAL_YGOAL-j) + Math.abs(GLOBAL_XGOAL-i);\r\n        var dist;\r\n        var open_list = [[]];\r\n        open_list.shift();\r\n        open_list.push([i,j,0,0]);\r\n        var paths = new Map();\r\n        paths.set(i+','+j,[0,null]);\r\n        let x = i;\r\n        let y = j;\r\n        var timer = 1;\r\n            var search = setInterval(() => {\r\n                for(var ii = 0; ii < timer; ii++) {\r\n                    var squares = [];\r\n                    for (var o = 0; o < this.state.squares.length; o++)\r\n                        squares = this.state.squares.slice();\r\n                        \r\n                    try{\r\n                        y = open_list[0][0];\r\n                        x = open_list[0][1];\r\n                        if(squares[y][x] == 'X'){\r\n                            open_list.shift();\r\n                            return;\r\n                        }\r\n                        dist_origin = open_list[0][3];\r\n                        dist_origin++;\r\n                        if(open_list.length > 0 && !(y === GLOBAL_YGOAL && x === GLOBAL_XGOAL)) {\r\n                            open_list.shift();\r\n                            if(squares[y][x] !== 'X') { \r\n                                if(x < GLOBAL_XMAX-1 && squares[y][x+1] !== 'X' && squares[y][x+1] !== 'wall') {\r\n                                    dist_end = Math.abs( GLOBAL_YGOAL-y) + Math.abs(GLOBAL_XGOAL-(x+1));\r\n                                    dist = dist_origin + dist_end;\r\n                                    open_list.push([y,x+1,dist,dist_origin]);\r\n                                    paths.set(y+','+(x+1),[dist, y+','+x]);\r\n                                }\r\n                                if(x > 0 && squares[y][x-1] !== 'X' && squares[y][x-1] !== 'wall'){\r\n                                    dist_end = Math.abs( GLOBAL_YGOAL-y) + Math.abs( GLOBAL_XGOAL-(x-1));\r\n                                    dist = dist_origin + dist_end;\r\n                                    open_list.push([y,x-1,dist,dist_origin]);\r\n                                    paths.set(y+','+(x-1),[dist, y+','+x]);\r\n                                }\r\n                                if(y < GLOBAL_YMAX-1 && squares[y+1][x] !== 'X' && squares[y+1][x] !== 'wall'){\r\n                                    dist_end = Math.abs( GLOBAL_YGOAL-(y+1)) + Math.abs( GLOBAL_XGOAL-x);\r\n                                    dist = dist_origin + dist_end;\r\n                                    open_list.push([y+1,x,dist,dist_origin]);\r\n                                    paths.set((y+1)+','+x,[dist, y+','+x]);\r\n                                }\r\n                                if(y > 0 && squares[y-1][x] !== 'X' && squares[y-1][x] !== 'wall'){\r\n                                    dist_end = Math.abs( GLOBAL_YGOAL-(y-1)) + Math.abs( GLOBAL_XGOAL-x);\r\n                                    dist = dist_origin + dist_end;\r\n                                    open_list.push([y-1,x,dist,dist_origin]);\r\n                                    paths.set((y-1)+','+x,[dist, y+','+x]);\r\n                                }\r\n                                \r\n                                open_list.sort(function(a,b){\r\n                                    return a[2]-b[2];\r\n                                });\r\n                                squares[y][x] = 'X';\r\n                                squares[i][j] = 'start';\r\n                                document.getElementById(y+\",\"+x).className = squares[y][x] + \" square\";\r\n                                timer = open_list.length;\r\n                            }\r\n                        } else {\r\n                            timer = 1;\r\n                            let next = paths.get(GLOBAL_YGOAL+','+GLOBAL_XGOAL)[1].split(',');\r\n                            y = next[0];\r\n                            x = next[1];\r\n                            squares[y][x] = 'visited';\r\n                            var find_path = setInterval(() => { \r\n                                if(next !== null && !(x == j && y == i)) {\r\n                                    squares[y][x] = 'visited';\r\n                                    document.getElementById(y+\",\"+x).className = squares[y][x] + \" square\";\r\n                                    next = paths.get(y+','+x)[1];\r\n                                    if(next!=null){\r\n                                        next = next.split(',');\r\n                                        y = next[0];\r\n                                        x = next[1];\r\n                                    }\r\n                                } else {\r\n                                    clearInterval(find_path);\r\n                                }\r\n                            clearInterval(search);\r\n                            }, 200);\r\n                            this.isRunning = false;\r\n                        }\r\n                    } catch {\r\n                        clearInterval(find_path);\r\n                        clearInterval(search);\r\n                        this.isRunning = false;\r\n                    }\r\n                }\r\n            }, 1);\r\n    }\r\n    toggleWall(){\r\n        this.isWalls = true;\r\n        document.getElementById(\"w\").className = \"navbar-toggler reset first active\";\r\n        document.getElementById(\"we\").className = \"navbar-toggler reset\";\r\n    }\r\n    toggleWeight(){\r\n        this.isWalls = false;\r\n        document.getElementById(\"w\").className = \"navbar-toggler reset first\";\r\n        document.getElementById(\"we\").className = \"navbar-toggler reset active\";\r\n    }\r\n    addWall(i,j){\r\n        if(this.isMouseDown){\r\n            var squares = [];\r\n            for (var o = 0; o < this.state.squares.length; o++)\r\n                squares = this.state.squares.slice();\r\n            if(squares[i][j] == 'green' || squares[i][j] == 'start'){\r\n            } else if (!this.isWalls && this.isWalls!=undefined){\r\n                squares[i][j] = 'weight real_weight';\r\n                document.getElementById(i+\",\"+j).className = 'weight real_weight square';\r\n            } else if (squares[i][j] == 'wall'){\r\n                squares[i][j] = null;\r\n                document.getElementById(i+\",\"+j).className = 'square';\r\n            } else {\r\n                squares[i][j] = 'wall';\r\n                document.getElementById(i+\",\"+j).className = 'wall square';\r\n            }\r\n           // this.setState({squares: squares});\r\n        }\r\n    }\r\n    toggleMouseDown(){\r\n        this.isMouseDown = true;\r\n    }\r\n    toggleMouseUp(){\r\n        this.isMouseDown = false;\r\n    }\r\n    moveStart(i,j){\r\n        var squares = [];\r\n        for (var o = 0; o < this.state.squares.length; o++)\r\n            squares = this.state.squares.slice();\r\n        var xStart = this.state.xStart;\r\n        var yStart = this.state.yStart;\r\n        squares[xStart][yStart] = null;\r\n        document.getElementById(xStart+\",\"+yStart).className = \"square\";\r\n        squares[i][j] = 'start';\r\n        document.getElementById(i+\",\"+j).className = squares[i][j] + \" square\";\r\n        xStart = i;\r\n        yStart = j;\r\n        this.setState({squares: squares, xStart: xStart, yStart: yStart})\r\n    }   \r\n    renderSquare(i,j) {\r\n        return (\r\n        <Square\r\n            value={this.state.squares[i][j]}\r\n            onClick={() => this.moveStart(i,j)}\r\n            clas={this.state.class}\r\n            onMouseOver={() => this.addWall(i,j)}\r\n            onMouseDown={() => this.toggleMouseDown()}\r\n            onMouseUp={() => this.toggleMouseUp()}\r\n            isMouseDown ={this.isMouseDown}\r\n            isWalls={this.isWalls}\r\n            location ={[i]+','+[j]}\r\n            y = {i}\r\n            x ={j}\r\n        />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let status;\r\n        \r\n        const items = [[]];\r\n        for(var x = 0; x < GLOBAL_YMAX; x++) {\r\n            var row = [];\r\n            for(var j = 0; j < GLOBAL_XMAX; j++){\r\n                row.push(this.renderSquare(x,j));\r\n                if(j===GLOBAL_XMAX-1)\r\n                    items.push(row);\r\n            }\r\n            \r\n        }\r\n        const board_ = [];\r\n        for (const [index] of items.entries()) {\r\n            board_.push(<div className=\"board-row\">{items[index]}</div>);\r\n        }\r\n        \r\n        return (\r\n        \r\n        <div>\r\n\r\n        <nav className=\"navbar navbar-dark dark\">\r\n            <a className=\"navbar-brand\" href=\"#\"><img src=\"path.png\"></img> <div className=\"logo\">Pathfinder</div></a>\r\n            <div className=\"nav-center\">\r\n                <button id=\"w\" className=\"navbar-toggler reset active\"onClick={() => this.toggleWall()}> Add Walls</button>\r\n                <button id=\"we\" className=\"navbar-toggler reset\"onClick={() => this.toggleWeight()}> Add Weights</button>\r\n                <button className=\"navbar-toggler reset\"onClick={() => this.BFS(this.state.xStart,this.state.yStart)}> Dijsktra's</button>\r\n                <button className=\"navbar-toggler reset\"onClick={() => this.A_star(this.state.xStart,this.state.yStart)}> A*</button>\r\n                <button className=\"navbar-toggler reset\"onClick={() => this.resetState()}> Reset Board</button>\r\n                <button className=\"navbar-toggler reset\"onClick={() => this.StartMaze(parseInt(GLOBAL_XMAX/2), parseInt(GLOBAL_YMAX/2), GLOBAL_XMAX, GLOBAL_YMAX, 0, 0)}> Generate Maze</button>\r\n            </div>\r\n        </nav>\r\n             \r\n        <div className=\"status\">{status}</div>\r\n            {board_}\r\n        </div>\r\n        \r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\nrender() {\r\n    return (\r\n    <div className=\"game\">\r\n        <div className=\"game-board\">\r\n        <Board />\r\n        </div>\r\n        <div className=\"game-info\">\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n}\r\n\r\n// ========================================\r\nconst domContainer = document.querySelector('#root');\r\nReactDOM.render(<Game />,domContainer);\r\n"],"sourceRoot":""}